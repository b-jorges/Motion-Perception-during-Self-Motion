ggplot(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0),aes(PSE_From_PF_Me,PSE_From_PF_Michael/0.381)) +
geom_point()
ggplot(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0),aes(PSE_From_PF_Me/0.381,PSE_From_PF_Michael/0.381)) +
geom_point()
ggplot(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0),aes(PSE_From_PF_Me,PSE_From_PF_Michael)) +
geom_point() +
xlab("PSEs Björn's method") +
ylab("PSEs Michael's method")
####compare Michael's values to ours:
Task3_Michael = Task3_Michael %>%
mutate(SessionLawl = case_when(
Session == "BDC1" ~ "Session 1",
Session == "BDC2" ~ "Session 2",
Session == "BDC3" ~ "Session 3",
Session == "BDC4" ~ "Session 4",
Session == "BDC5" ~ "Session 5",
))
#correlate both methods
Task3$PSE_From_PF_Michael = NA
Task3$JND_From_PF_Michael = NA
i = 1
for (i in 1:length(Task3$Distance)){
ID = Task3$id[i]
Session = Task3$PointInTime[i]
Posture = Task3$Posture[i]
Distance = Task3$Distance[i]
if (length(Task3_Michael$PSE[Task3_Michael$id == ID &
Task3_Michael$SessionLawl == Session &
Task3_Michael$Posture == Posture &
Task3_Michael$Distance == Distance]) == 0){
print(ID)
} else {
Task3$JND_From_PF_Michael[i] = Task3_Michael$JND[Task3_Michael$id == ID &
Task3_Michael$SessionLawl == Session &
Task3_Michael$Posture == Posture &
Task3_Michael$Distance == Distance]
}
}
#correlate both methods
Task3$PSE_From_PF_Me = NA
Task3$JND_From_PF_Me = NA
i = 1
for (i in 1:length(Task3$Distance)){
ID = Task3$id[i]
Session = Task3$PointInTime[i]
Posture = Task3$Posture[i]
Distance = Task3$Distance[i]
if (length(Parameters$Mean[Parameters$id == ID &
Parameters$PointInTime == Session &
Parameters$Posture == Posture &
Parameters$Distance == Distance]) == 0){
print(ID)
} else {
Task3$PSE_From_PF_Me[i] = Parameters$Mean[Parameters$id == ID &
Parameters$PointInTime == Session &
Parameters$Posture == Posture &
Parameters$Distance == Distance]
Task3$JND_From_PF_Me[i] = Parameters$SD[Parameters$id == ID &
Parameters$PointInTime == Session &
Parameters$Posture == Posture &
Parameters$Distance == Distance]
}
}
cor.test((Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$Ratio,
(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$PSE_From_PF_Me)
cor.test((Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$Ratio,
(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$PSE_From_PF_Michael)
cor.test((Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$PSE_From_PF_Me,
(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$PSE_From_PF_Michael)
cor.test((Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$JND_From_PF_Me,
(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$JND_From_PF_Michael)
Task3$JND_From_PF_Me
Task3$PSE_From_PF_Me
#correlate both methods
Task3$PSE_From_PF_Michael = NA
Task3$JND_From_PF_Michael = NA
i = 1
for (i in 1:length(Task3$Distance)){
ID = Task3$id[i]
Session = Task3$PointInTime[i]
Posture = Task3$Posture[i]
Distance = Task3$Distance[i]
if (length(Task3_Michael$PSE[Task3_Michael$id == ID &
Task3_Michael$SessionLawl == Session &
Task3_Michael$Posture == Posture &
Task3_Michael$Distance == Distance]) == 0){
print(ID)
} else {
Task3$PSE_From_PF_Michael[i] = Task3_Michael$PSE[Task3_Michael$id == ID &
Task3_Michael$SessionLawl == Session &
Task3_Michael$Posture == Posture &
Task3_Michael$Distance == Distance]
Task3$JND_From_PF_Michael[i] = Task3_Michael$JND[Task3_Michael$id == ID &
Task3_Michael$SessionLawl == Session &
Task3_Michael$Posture == Posture &
Task3_Michael$Distance == Distance]
}
}
#correlate both methods
Task3$PSE_From_PF_Me = NA
Task3$JND_From_PF_Me = NA
i = 1
for (i in 1:length(Task3$Distance)){
ID = Task3$id[i]
Session = Task3$PointInTime[i]
Posture = Task3$Posture[i]
Distance = Task3$Distance[i]
if (length(Parameters$Mean[Parameters$id == ID &
Parameters$PointInTime == Session &
Parameters$Posture == Posture &
Parameters$Distance == Distance]) == 0){
print(ID)
} else {
Task3$PSE_From_PF_Me[i] = Parameters$Mean[Parameters$id == ID &
Parameters$PointInTime == Session &
Parameters$Posture == Posture &
Parameters$Distance == Distance]
Task3$JND_From_PF_Me[i] = Parameters$SD[Parameters$id == ID &
Parameters$PointInTime == Session &
Parameters$Posture == Posture &
Parameters$Distance == Distance]
}
}
cor.test((Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$Ratio,
(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$PSE_From_PF_Me)
cor.test((Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$Ratio,
(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$PSE_From_PF_Michael)
cor.test((Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$PSE_From_PF_Me,
(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$PSE_From_PF_Michael)
cor.test((Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$JND_From_PF_Me,
(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$JND_From_PF_Michael)
ggplot(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0),aes(JND_From_PF_Me,JND_From_PF_Michael)) +
geom_point() +
xlab("Precision Björn's method") +
ylab("Precision Michael's method")
ggplot(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0),aes(PSE_From_PF_Me,PSE_From_PF_Michael)) +
geom_point() +
xlab("PSE Björn's method") +
ylab("PSE Michael's method")
ggsave("FiguresControls/Task3_PSEs_MichaelVsBjorn.jpg",w = 9, h = 6)
ggsave("FiguresControls/Task3_PSEs_MichaelVsBjorn.jpg",w = 6, h = 6)
ggplot(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0),aes(PSE_From_PF_Me,PSE_From_PF_Michael)) +
geom_point() +
xlab("PSE Björn's method") +
ylab("PSE Michael's method")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
ids = c(9854,
1793,
2713,
1894,
3714,
8917,
4626,
1119,
9476,
8280,
3599,
6351,
1388,
7623,
9403,
5781,
9150,
9517,
3085,
3226,
6583,
7292)
letters = c("D",
"H",
"W",
"P",
"E",
"L",
"C",
"J",
"F",
"A",
"V",
"R",
"N",
"Q",
"X",
"G",
"K",
"Z",
"B",
"M",
"Y",
"S")
Task3_Michael$id = c()
for (i in 1:length(letters)){
letter = letters[i]
id = ids[i]
Task3_Michael$id[Task3_Michael$Participant == letter] = id
}
####compare Michael's values to ours:
Task3_Michael = Task3_Michael %>%
mutate(SessionLawl = case_when(
Session == "BDC1" ~ "Session 1",
Session == "BDC2" ~ "Session 2",
Session == "BDC3" ~ "Session 3",
Session == "BDC4" ~ "Session 4",
Session == "BDC5" ~ "Session 5",
))
#correlate both methods
Task3$PSE_From_PF_Michael = NA
Task3$JND_From_PF_Michael = NA
i = 1
for (i in 1:length(Task3$Distance)){
ID = Task3$id[i]
Session = Task3$PointInTime[i]
Posture = Task3$Posture[i]
Distance = Task3$Distance[i]
if (length(Task3_Michael$PSE[Task3_Michael$id == ID &
Task3_Michael$SessionLawl == Session &
Task3_Michael$Posture == Posture &
Task3_Michael$Distance == Distance]) == 0){
print(ID)
} else {
Task3$PSE_From_PF_Michael[i] = Task3_Michael$PSE[Task3_Michael$id == ID &
Task3_Michael$SessionLawl == Session &
Task3_Michael$Posture == Posture &
Task3_Michael$Distance == Distance]
Task3$JND_From_PF_Michael[i] = Task3_Michael$JND[Task3_Michael$id == ID &
Task3_Michael$SessionLawl == Session &
Task3_Michael$Posture == Posture &
Task3_Michael$Distance == Distance]
}
}
#correlate both methods
Task3$PSE_From_PF_Me = NA
Task3$JND_From_PF_Me = NA
i = 1
for (i in 1:length(Task3$Distance)){
ID = Task3$id[i]
Session = Task3$PointInTime[i]
Posture = Task3$Posture[i]
Distance = Task3$Distance[i]
if (length(Parameters$Mean[Parameters$id == ID &
Parameters$PointInTime == Session &
Parameters$Posture == Posture &
Parameters$Distance == Distance]) == 0){
print(ID)
} else {
Task3$PSE_From_PF_Me[i] = Parameters$Mean[Parameters$id == ID &
Parameters$PointInTime == Session &
Parameters$Posture == Posture &
Parameters$Distance == Distance]
Task3$JND_From_PF_Me[i] = Parameters$SD[Parameters$id == ID &
Parameters$PointInTime == Session &
Parameters$Posture == Posture &
Parameters$Distance == Distance]
}
}
cor.test((Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$Ratio,
(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$PSE_From_PF_Me)
cor.test((Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$Ratio,
(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$PSE_From_PF_Michael)
cor.test((Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$PSE_From_PF_Me,
(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$PSE_From_PF_Michael)
cor.test((Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$JND_From_PF_Me,
(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0))$JND_From_PF_Michael)
ggplot(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1),aes(Ratio,PSE_From_PF_Me)) +
geom_point()
ggplot(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0),aes(PSE_From_PF_Me,PSE_From_PF_Michael)) +
geom_point() +
xlab("PSEs Björn's method") +
ylab("PSEs Michael's method")
ggplot(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0),aes(PSE_From_PF_Me,PSE_From_PF_Michael)) +
geom_point() +
xlab("PSE Björn's method") +
ylab("PSE Michael's method")
ggsave("FiguresControls/Task3_PSEs_MichaelVsBjorn.jpg",w = 6, h = 6)
ggplot(Task3 %>%
group_by(PointInTime, Posture,Distance,id) %>%
slice(1) %>%
filter(PSE_From_PF_Michael > 0),aes(JND_From_PF_Me,JND_From_PF_Michael)) +
geom_point() +
xlab("Precision Björn's method") +
ylab("Precision Michael's method")
ggsave("FiguresControls/Task3_Precision_MichaelVsBjorn.jpg",w = 9, h = 6)
###Pull the whole repository. The code should work as long as the structure of the repository is not altered.
require(dplyr) #package for data structure manipulation
require(lme4) #package for statistical analysis
require(ggplot2) #package for data visualization
require(quickpsy) #package to fit psychometric functions
require(cowplot) #design for data visualiation
require(tidyverse)
theme_set(theme_cowplot()) #sets design parameters for data visualization
setwd(dirname(rstudioapi::getSourceEditorContext()$path)) #set path of this script as working directory
source("Utilities/parabolic.r") #load a bunch of custom functions from the file "parabolic.r" in the folder "Utilities"
source("Final Paper Data Preprocessing.r")
source("Final Paper Analysis.r")
####the following function gets the current path of this script
setwd(dirname(rstudioapi::getSourceEditorContext()$path)) #set path of this script as working directory
ggQuickPsy
ggplot(QuickPsy) +
facet_wrap
plot(QuickPsy) +
facet_wrap()
QuickPsy
###Pull the whole repository. The code should work as long as the structure of the repository is not altered.
require(dplyr) #package for data structure manipulation
require(lme4) #package for statistical analysis
require(ggplot2) #package for data visualization
require(quickpsy) #package to fit psychometric functions
require(cowplot) #design for data visualiation
require(tidyverse)
theme_set(theme_cowplot()) #sets design parameters for data visualization
setwd(dirname(rstudioapi::getSourceEditorContext()$path)) #set path of this script as working directory
source("Utilities/parabolic.r") #load a bunch of custom functions from the file "parabolic.r" in the folder "Utilities"
source("Final Paper Data Preprocessing.r")
source("Final Paper Analysis.r")
plot(QuickPsy) +
facet_wrap()
QuickPsy
load(file=paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/SavedVariables/QuickPsy.RData"))
plot(QuickPsy) +
facet_wrap()
QuickPsy
plot(QuickPsy) +
facet_wrap(Congruent~Condition+velH)
plot(QuickPsy)
QuickPsy
load(file=paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/SavedVariables/QuickPsy.RData"))
QuickPsy
QuickPsy
ggplot(QuickPsy)
plot(QuickPsy)
require(quickpsy) #package to fit psychometric functions
plot(QuickPsy)
plot(QuickPsy) +
facet_wrap(Participant+Congruent~Condition+velH)
ggplot(QuickPsy) +
facet_wrap(Participant+Congruent~Condition+velH)
plot(QuickPsy) +
facet_wrap(Participant+Congruent~Condition+velH)
?quickpsy
plotcurves(QuickPsy)
QuickPsy$curves
ggplot(QuickPsy$curves,aes(x,y,color = Congruent)) +
geom_point() +
facet_wrap(Participant~Condition+velH)
ggsave("Figures/CheckAllStaircases.jpg")
ggsave("Figures/CheckAllStaircases.jpg",w = 50, h = 50)
ggsave("Figures/CheckAllStaircases.jpg",w = 49, h = 49)
depth_difference = seq(-3,3,0.1)
disparity_test = 180 - ((90 - RadiansToDegree(atan(2.065/(15+depth_difference)))) + (90 + RadiansToDegree(atan(1.935/(15+depth_difference)))))
disparity_zero = 180 - ((90 - RadiansToDegree(atan(2.065/15))) + (90 + RadiansToDegree(atan(1.935/15))))
(disparity_test-disparity_zero)*3600
DF = data.frame(Disparity = (disparity_test-disparity_zero)*3600,
DepthDifference = depth_difference)
ggplot(DF, aes(DepthDifference, Disparity)) +
geom_point()
require(ggplot2)
depth_difference = seq(-3,3,0.1)
disparity_test = 180 - ((90 - RadiansToDegree(atan(2.065/(15+depth_difference)))) + (90 + RadiansToDegree(atan(1.935/(15+depth_difference)))))
disparity_zero = 180 - ((90 - RadiansToDegree(atan(2.065/15))) + (90 + RadiansToDegree(atan(1.935/15))))
(disparity_test-disparity_zero)*3600
DF = data.frame(Disparity = (disparity_test-disparity_zero)*3600,
DepthDifference = depth_difference)
ggplot(DF, aes(DepthDifference, Disparity)) +
geom_point()
MinimizeThis = function(size,distance){
abs(atan((2+0.5*size)/distance)-atan((2-0.5*size)/distance) + atan(1/15) - atan(3/15))
}
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 13.5)
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 16.5)
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 12)
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 18)
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 13.5)
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 16.5)
ggplot(DF, aes(DepthDifference, Disparity)) +
geom_point()
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 13.5)
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 16.5)
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 12)
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 18)
Stereo_Differences_ArcSec
require(ggplot2)
depth_difference = seq(-3,3,0.1)
disparity_test = 180 - ((90 - RadiansToDegree(atan(2.065/(15+depth_difference)))) + (90 + RadiansToDegree(atan(1.935/(15+depth_difference)))))
#here we compute the disparity elicited by the comparison rectangle:
disparity_zero = 180 - ((90 - RadiansToDegree(atan(2.065/15))) + (90 + RadiansToDegree(atan(1.935/15))))
#here we convert it into arcsec:
(disparity_test-disparity_zero)*3600
DF = data.frame(Disparity = (disparity_test-disparity_zero)*3600,
DepthDifference = depth_difference)
#here we plot the difference in disparity in function of the difference in depth between test and comparison rectangle:
ggplot(DF, aes(DepthDifference, Disparity)) +
geom_point()
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 13.5)
MinimizeThis = function(size,distance){
abs(atan((2+0.5*size)/distance)-atan((2-0.5*size)/distance) + atan(1/15) - atan(3/15))
}
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 13.5)
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 16.5)
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 13.5)
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 16.5)
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 13.5)
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 16.5)
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 12)
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 18)
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 13.5)
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 16.5)
optimize(MinimizeThis,0,tol = 0.0000001, distance = 13.5)
#find the optimal value to achieve a disparity
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 13.5)
#find the optimal value to achieve a disparity of 200 arcsec:
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 13.5) #for test rectangle at 13.5m
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 16.5) #for test rectangle at 16.5m
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 12)
optimize(MinimizeThis,c(0,3),tol = 0.0000001, distance = 18)
