size = 1,
color = "black",
linetype = 5) +
geom_segment(aes(x = 2.5,
y = (Parameters %>%
filter(Condition %in% c("RegularCondition", "RegularWallStatic") & Congruent == "1no motion") %>%
group_by(Congruent))$Mean_Mean_Minus_velH[1] + 1,
xend = 3.5,
yend = (Parameters %>%
filter(Condition %in% c("RegularCondition", "RegularWallStatic") & Congruent == "1no motion") %>%
group_by(Congruent))$Mean_Mean_Minus_velH[1] + 1),
size = 1,
color = "black",
linetype = 5)
Laurence6 = ggplot(Parameters %>% filter(Condition %in% c("WallMoves", "RegularWallStatic")), aes(Congruent,SD,color = Congruent)) +
geom_point(alpha = 0.4, size = 3) +
geom_point(aes(Congruent,Mean_SD), size = 8) +
scale_x_discrete(labels = c("Static","Same Direction", "Opposite Directions")) +
theme(legend.position = "") +
ggtitle("Precision - Moving Wall") +
ylab("SD (m/s)") +
theme(axis.title.x=element_blank()) +
#  coord_cartesian(ylim = c(0,5.5)) +
scale_color_manual(values = c(Red,BlauUB, "lightblue")) +
annotate("text", x = 1.5, y = 7.5, label = paste0("95% CI = [",
round(ConfidenceIntervals_WallMoves["Congruentcongruent:velH_Pest",1],2),
";",
round(ConfidenceIntervals_WallMoves["Congruentcongruent:velH_Pest",2],2),
"]")) +
# annotate("text", x = 1.5, y = 3.75, label = if(summary(mod1_WallMoves)$coef[23] >= 0.001){paste0("p = ",
#                                             round(summary(mod1_WallMoves)$coef[23],3))} else{"p < 0.001"}) +
annotate("segment", x = 1, xend = 2, y = 7, yend = 7) +
annotate("text", x = 2, y = 9, label = paste0("95% CI = [",
round(ConfidenceIntervals_WallMoves["Congruentincongruent:velH_Pest",1],2),
";",
round(ConfidenceIntervals_WallMoves["Congruentincongruent:velH_Pest",2],3),
"]")) +
# annotate("text", x = 2, y = 4.75, label = if(summary(mod1_WallMoves)$coef[24] >= 0.001){paste0("p = ",
#                                           round(summary(mod1_WallMoves)$coef[24],3))} else{"p < 0.001"}) +
annotate("segment", x = 1, xend = 3, y = 8.5, yend = 8.5) +
geom_hline(yintercept = mean((Parameters %>% filter(Condition %in% c("WallMoves", "RegularWallStatic") & Congruent == "1no motion"))$SD),
linetype = 3)
plot_grid(Laurence1,Laurence2, nrow = 1, labels = "AUTO")
ggsave("Figures/Main Plots Regular Condition.jpg", w = 10, h = 4.5)
plot_grid(Laurence3, Laurence4, Laurence5,Laurence6, nrow = 2, labels = "AUTO")
ggsave("Figures/Main Plots Control Conditions.jpg", w = 10, h = 8)
###Pull the whole repository. The code should work as long as the structure of the repository is not altered.
require(lme4) #package for statistical analysis
setwd(dirname(rstudioapi::getSourceEditorContext()$path)) #set path of this script as working directory
source("Final Paper Data Preprocessing.r")
######Figure 2
ggplot(Data_Selfmotion %>%
mutate(Condition2 = case_when(
Condition == "BlankWall" ~ "2BlankWall",
Condition == "RegularCondition" ~ "1RegularCondition",
Condition == "WallMoves" ~ "3WallMoves")),aes(Condition2,Judgement)) +
geom_jitter(alpha = 0.2, width = 0.05) +
geom_flat_violin(size=1) +
stat_summary(fun = "mean", geom = "point",size = 6, aes(group=c(Participant)), shape = 95) +
stat_summary(fun = "mean", geom = "point",size = 4, aes(group=0), shape = 16, color = "black") +
annotate("segment", x = 0.6, xend = 1.4, y = 0.6, yend = 0.6, linetype = 2, size = 1.5) +
annotate("segment", x = 1.6, xend = 2.4, y = 0.6, yend = 0.6, linetype = 2, size = 1.5) +
annotate("segment", x = 2.6, xend = 3.4, y = -0.6, yend = -0.6, linetype = 2, size = 1.5) +
scale_x_discrete(labels = c("Regular Condition","Blank Wall","Moving Wall"), name = NULL)
ggsave("Figures/(Figure 2) Selfmotion.jpg",w = 6, h = 6)
#########regular results
# Include = glmer(cbind(Yes, Total - Yes) ~ Include*Congruent*velH_Pest + (velH_Pest + Congruent  | Participant) + (velH_Pest + Congruent | velH),
#                              family = binomial(link = "probit"),
#                              data = Data_GLM,
#                              nAGQ = 0,
#                              glmerControl(optimizer = "nloptwrap"))
#
# Include_Null = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest + Congruent  | Participant) + (velH_Pest + Congruent | velH),
#                                   family = binomial(link = "probit"),
#                                   data = Data_GLM,
#                                   nAGQ = 0,
#                                   glmerControl(optimizer = "nloptwrap"))
#
# save(Include, file = paste0(dirname(rstudioapi::getSourceEditorContext()$path),
#                                                               "/SavedVariables/Include.RData"))
# save(Include_Null, file = paste0(dirname(rstudioapi::getSourceEditorContext()$path),
#                                                               "/SavedVariables/Include_Null.RData"))
load(file=paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/SavedVariables/Include.RData"))
load(file=paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/SavedVariables/Include_Null.RData"))
anova(Include, Include_Null)
###Pull the whole repository. The code should work as long as the structure of the repository is not altered.
require(dplyr) #package for data structure manipulation
require(ggplot2) #package for data visualization
require(cowplot) #design for data visualization
require(tidyverse)
theme_set(theme_cowplot()) #sets design parameters for data visualization
setwd(dirname(rstudioapi::getSourceEditorContext()$path)) #set path of this script as working directory
source("Final Paper Data Preprocessing.r")
source("Final Paper Analysis.r")
Parameters_Regular = Parameters %>%
filter(Condition %in% c("RegularCondition", "RegularWallStatic")) %>%
group_by(velH,Participant) %>%
filter(length(Mean) == 3) %>%
arrange(Participant,velH,Condition) %>%
mutate(Baseline_PSE = Mean[Congruent == "1no motion"],
Baseline_SD = SD[Congruent == "1no motion"],
DifferenceToBaseline_PSE = Mean-Baseline_PSE,
DifferenceToBaseline_SD = SD-Baseline_SD) %>%
group_by(Congruent) %>%
mutate(Mean_DifferenceToBaseline_PSE = mean(DifferenceToBaseline_PSE[Congruent != "1no motion"]),
Mean_DifferenceToBaseline_SD = mean(DifferenceToBaseline_SD[Congruent != "1no motion"]))
###################Figure 3
Panel1 = ggplot(Parameters_Regular %>% filter(Congruent != "1no motion"), aes(Congruent,DifferenceToBaseline_PSE,color = Congruent)) +
geom_point(alpha = 0.5, size = 3) +
geom_point(aes(Congruent,Mean_DifferenceToBaseline_PSE), size = 8) +
scale_x_discrete(labels = c("Same Direction", "Opposite Directions")) +
theme(legend.position = "") +
ggtitle("Accuracy - Main Condition") +
ylab("PSE Difference from Static (m/s)") +
theme(axis.title.x=element_blank()) +
scale_color_manual(values = c(BlauUB, "lightblue")) +
geom_point(aes(Congruent,Mean_DifferenceToBaseline_PSE), size = 4) +
annotate("text", x = 1, y = 2.5, label = paste0("95% CI = [",
round(ConfidenceIntervals_Regular["Congruentcongruent",1],2),
";",
round(ConfidenceIntervals_Regular["Congruentcongruent",2],2),
"]")) +
annotate("text", x = 2, y = 2.5, label = paste0("95% CI = [",
round(ConfidenceIntervals_Regular["Congruentincongruent",1],2),
";",
round(ConfidenceIntervals_Regular["Congruentincongruent",2],2),
"]")) +
geom_hline(yintercept = 0,
linetype = 3) +
annotate("segment",x = 0.6, xend = 1.4, y = -1, yend = -1, linetype = 2, size = 2) +
annotate("segment",x = 1.6, xend = 2.4, y = 1, yend = 1, linetype = 2, size = 2)
Panel2 = ggplot(Parameters_Regular %>% filter(Congruent != "1no motion"), aes(Congruent,DifferenceToBaseline_SD,color = Congruent)) +
geom_point(alpha = 0.5, size = 3) +
scale_x_discrete(labels = c("Same Direction", "Opposite Directions")) +
theme(legend.position = "") +
ylab("SD Difference from Static (m/s)") +
ggtitle("Precision - Main Condition") +
theme(axis.title.x=element_blank()) +
scale_color_manual(values = c(BlauUB, "lightblue")) +
geom_point(aes(Congruent,Mean_DifferenceToBaseline_SD), size = 8) +
annotate("text", x = 1, y = 5.5, label = paste0("95% CI = [",
round(ConfidenceIntervals_Regular["Congruentcongruent:velH_Pest",1],2),
";",
round(ConfidenceIntervals_Regular["Congruentcongruent:velH_Pest",2],2),
"]")) +
annotate("text", x = 2, y = 5.5, label = paste0("95% CI = [",
round(ConfidenceIntervals_Regular["Congruentincongruent:velH_Pest",1],2),
";",
round(ConfidenceIntervals_Regular["Congruentincongruent:velH_Pest",2],2),
"]")) +
geom_hline(yintercept = 0,
linetype = 3)
Parameters_Blank = Parameters %>%
filter(Condition %in% c("BlankWall", "BlankWallStatic")) %>%
group_by(velH,Participant) %>%
filter(length(Mean) == 3) %>%
arrange(Participant,velH,Condition) %>%
mutate(Baseline_PSE = Mean[Congruent == "1no motion"],
Baseline_SD = SD[Congruent == "1no motion"],
DifferenceToBaseline_PSE = Mean-Baseline_PSE,
DifferenceToBaseline_SD = SD-Baseline_SD) %>%
group_by(Congruent) %>%
mutate(Mean_DifferenceToBaseline_PSE = mean(DifferenceToBaseline_PSE[Congruent != "1no motion"]),
Mean_DifferenceToBaseline_SD = mean(DifferenceToBaseline_SD[Congruent != "1no motion"]))
###################Figure 4
Panel3 = ggplot(Parameters_Blank %>% filter(Congruent != "1no motion"), aes(Congruent,DifferenceToBaseline_PSE,color = Congruent)) +
geom_point(alpha = 0.5, size = 3) +
scale_x_discrete(labels = c("Same Direction", "Opposite Directions")) +
theme(legend.position = "") +
ggtitle("Accuracy - Blank Wall") +
ylab("PSE Difference from Static (m/s)") +
theme(axis.title.x=element_blank()) +
geom_point(aes(Congruent,Mean_DifferenceToBaseline_PSE), size = 8) +
scale_color_manual(values = c(BlauUB, "lightblue")) +
annotate("text", x = 1, y = 2, label = paste0("95% CI = [",
round(ConfidenceIntervals_Blankwall["Congruentcongruent",1],2),
";",
round(ConfidenceIntervals_Blankwall["Congruentcongruent",2],2),
"]")) +
annotate("text", x = 2, y = 2, label = paste0("95% CI = [",
round(ConfidenceIntervals_Blankwall["Congruentincongruent",1],2),
";",
round(ConfidenceIntervals_Blankwall["Congruentincongruent",2],2),
"]")) +
geom_hline(yintercept = 0,
linetype = 3) +
annotate("segment",x = 0.6, xend = 1.4, y = -1, yend = -1, linetype = 2, size = 2) +
annotate("segment",x = 1.6, xend = 2.4, y = 1, yend = 1, linetype = 2, size = 2)
Panel4 = ggplot(Parameters_Blank %>% filter(Congruent != "1no motion"), aes(Congruent,DifferenceToBaseline_SD,color = Congruent)) +
geom_point(alpha = 0.5, size = 3) +
scale_x_discrete(labels = c("Same Direction", "Opposite Directions")) +
theme(legend.position = "") +
ggtitle("Precision - Blank Wall") +
ylab("SD Difference from Static (m/s)") +
scale_color_manual(values = c(BlauUB, "lightblue")) +
theme(axis.title.x=element_blank()) +
geom_point(aes(Congruent,Mean_DifferenceToBaseline_SD), size = 8) +
annotate("text", x = 1, y = 3.5, label = paste0("95% CI = [",
round(ConfidenceIntervals_Blankwall["Congruentcongruent:velH_Pest",1],2),
";",
round(ConfidenceIntervals_Blankwall["Congruentcongruent:velH_Pest",2],2),
"]")) +
annotate("text", x = 2, y = 3.5, label = paste0("95% CI = [",
round(ConfidenceIntervals_Blankwall["Congruentincongruent:velH_Pest",1],2),
";",
round(ConfidenceIntervals_Blankwall["Congruentincongruent:velH_Pest",2],2),
"]")) +
geom_hline(yintercept = 0,
linetype = 3)
Parameters_MovingWall = Parameters %>%
filter(Condition %in% c("RegularWallStatic", "WallMoves")) %>%
group_by(velH,Participant) %>%
filter(length(Mean) == 3) %>%
arrange(Participant,velH,Condition) %>%
mutate(Baseline_PSE = Mean[Congruent == "1no motion"],
Baseline_SD = SD[Congruent == "1no motion"],
DifferenceToBaseline_PSE = Mean-Baseline_PSE,
DifferenceToBaseline_SD = SD-Baseline_SD) %>%
group_by(Congruent) %>%
mutate(Mean_DifferenceToBaseline_PSE = mean(DifferenceToBaseline_PSE[Congruent != "1no motion"]),
Mean_DifferenceToBaseline_SD = mean(DifferenceToBaseline_SD[Congruent != "1no motion"]))
Panel5 = ggplot(Parameters_MovingWall %>% filter(Congruent != "1no motion"),
aes(Congruent,DifferenceToBaseline_PSE,color = Congruent)) +
geom_point(alpha = 0.2, size = 3) +
geom_point(aes(Congruent,Mean_DifferenceToBaseline_PSE), size = 8) +
scale_x_discrete(labels = c("Same Direction", "Opposite Directions")) +
ylab("PSE Difference from Static (m/s)") +
theme(legend.position = "") +
ggtitle("Accuracy - Moving Wall") +
theme(axis.title.x=element_blank()) +
scale_color_manual(values = c(BlauUB, "lightblue")) +
annotate("text", x = 1, y = 2, label = paste0("95% CI = [",
round(ConfidenceIntervals_WallMoves["Congruentcongruent",1],2),
";",
round(ConfidenceIntervals_WallMoves["Congruentcongruent",2],2),
"]")) +
annotate("text", x = 2, y = 2, label = paste0("95% CI = [",
round(ConfidenceIntervals_WallMoves["Congruentincongruent",1],2),
";",
round(ConfidenceIntervals_WallMoves["Congruentincongruent",2],2),
"]")) +
geom_hline(yintercept = 0,
linetype = 3) +
annotate("segment",x = 0.6, xend = 1.4, y = -1, yend = -1, linetype = 2, size = 2) +
annotate("segment",x = 1.6, xend = 2.4, y = 1, yend = 1, linetype = 2, size = 2)
Panel6 = ggplot(Parameters_MovingWall %>% filter(Congruent != "1no motion"),
aes(Congruent,DifferenceToBaseline_SD,color = Congruent)) +
geom_point(alpha = 0.4, size = 3) +
geom_point(aes(Congruent,Mean_DifferenceToBaseline_SD), size = 8) +
scale_x_discrete(labels = c("Same Direction", "Opposite Directions")) +
theme(legend.position = "") +
ggtitle("Precision - Moving Wall") +
ylab("SD Difference from Static (m/s)") +
theme(axis.title.x=element_blank()) +
scale_color_manual(values = c(BlauUB, "lightblue")) +
annotate("text", x = 1, y = 5.5, label = paste0("95% CI = [",
round(ConfidenceIntervals_WallMoves["Congruentcongruent:velH_Pest",1],2),
";",
round(ConfidenceIntervals_WallMoves["Congruentcongruent:velH_Pest",2],2),
"]")) +
annotate("text", x = 2, y = 5.5, label = paste0("95% CI = [",
round(ConfidenceIntervals_WallMoves["Congruentincongruent:velH_Pest",1],2),
";",
round(ConfidenceIntervals_WallMoves["Congruentincongruent:velH_Pest",2],3),
"]")) +
geom_hline(yintercept = 0,
linetype = 3)
###################Figure 3
plot_grid(Panel1,Panel2, nrow = 1, labels = "AUTO")
ggsave("Figures/(Figure 3) Main Plots Regular Condition Difference.jpg", w = 9, h = 5)
###################Figure 4
plot_grid(Panel3, Panel4, Panel5,Panel6, nrow = 2, labels = "AUTO")
ggsave("Figures/(Figure 4) Main Plots Control Conditions Difference.jpg", w = 9, h = 9)
###Pull the whole repository. The code should work as long as the structure of the repository is not altered.
require(dplyr) #package for data structure manipulation
require(lme4) #package for statistical analysis
require(ggplot2) #package for data visualization
require(cowplot) #design for data visualiation
require(tidyverse)
setwd(dirname(rstudioapi::getSourceEditorContext()$path)) #set path of this script as working directory
theme_set(theme_cowplot()) #sets design parameters for data visualization
source("Final Paper Data Preprocessing.r")
###################################
######PSE Model
###################################
Parameters = Parameters %>%
mutate(Static = case_when(
Condition %in% c("RegularWallStatic","BlankWallStatic") ~ "Static",
TRUE ~ "Movement"
),
WallMaterial = case_when(
Condition %in% c("BlankWall","BlankWallStatic") ~ "Blank",
TRUE ~ "Textured"
)
)
Parameters = Parameters %>%
#only continue with participants where we have data from all staircases
group_by(Participant) %>%
filter(length(Congruent) > 15) %>%
mutate(ConditionSelfmotion = case_when(
Congruent == "1no motion" ~ 0,
Congruent == "congruent" & Condition %in% c("BlankWall","RegularCondition") ~ -1,
Congruent == "incongruent" & Condition %in% c("BlankWall","RegularCondition") ~ 1,
Condition == "WallMoves" ~ 0),
#should motion be induced (no = 0) and should it make for speed overestimation (1) or underrstimation (-1)
ConditionInducedMotion = case_when(
Congruent == "1no motion" ~ 0,
#if the wall moves in the same direction as the target, induced motion would lead the target to be perceived as slower
Congruent == "congruent" & Condition == "WallMoves" ~ -1,
#selfmotion in the same direction as the target would lead the background to move in the opposite direction,
#thus motion should be induced in the same direction as the target and the target should be perceived as faster
Congruent == "congruent" & Condition %in% c("RegularCondition","BlankWall") ~ 1,
#if the wall moves in the opposite direction of the target, induced motion would lead the target to be perceived as faster
Congruent == "incongruent" & Condition == "WallMoves" ~ 1,
#selfmotion in the same direction as the target would lead the background to move in the opposite direction,
#thus motion should be induced in the same direction as the target and the target should be perceived as faster
Congruent == "incongruent" & Condition %in% c("RegularCondition","BlankWall") ~ -1),
#effect of self-motion should occur whenever the participant is moving, but not when the wall is moving
SelfmotionPresent = case_when(
Condition %in% c("BlankWallStatic", "RegularConditionStatic", "WallMoves") ~ 0,
TRUE ~ 1),
#Induced motion should happen when the wall moves, but also when the participant moves and the wall is textured
InducedMotionPresent = case_when( #effect of induced motion
Condition %in% c("WallMoves", "RegularCondition") ~ 1,
TRUE ~ 0))  %>%
mutate(Static = case_when(
Condition %in% c("RegularWallStatic","BlankWallStatic") ~ "Static",
TRUE ~ "Movement"
),
WallMaterial = case_when(
Condition %in% c("BlankWall","BlankWallStatic") ~ "Blank",
TRUE ~ "Textured"
)
) %>%
#Define baseline for each condition (blank wall and texture wall/participants/target velocity seperately)
group_by(Participant,velH, WallMaterial) %>%
mutate(Baseline_PSE = Mean[Static == "Static"],
Baseline_JND = SD[Static == "Static"],
)
#Fit PSEs based on the effect of self-motion and induced motion (two parameters)
#See Equation 8 in paper
FitPSEs = function(x,Mean,Baseline_PSE,ConditionSelfmotion,ConditionInducedMotion,SelfmotionPresent,InducedMotionPresent){
SelfmotionEffect = x[1]
InducedMotionEffect = x[2]
(mean((Mean - (Baseline_PSE +
ConditionSelfmotion*SelfmotionEffect*SelfmotionPresent +
ConditionInducedMotion*InducedMotionEffect*InducedMotionPresent))^2))^0.5
}
InitialParameters_PSE = c(0,0)
#fit the model for each participant seperately and output the effect of self-motion,
#the effeect of induced motion, the Root Mean Squared Error and the predictions (to be compared against actual performance)
Model_PSE = Parameters %>%
group_by(Participant) %>%
mutate(SelfmotionEffect = optim(InitialParameters_PSE,
FitPSEs,
Mean = Mean,
Baseline_PSE = Baseline_PSE,
ConditionSelfmotion = ConditionSelfmotion,
ConditionInducedMotion = ConditionInducedMotion,
SelfmotionPresent = SelfmotionPresent,
InducedMotionPresent = InducedMotionPresent)$par[1],
InducedMotionEffect = optim(InitialParameters_PSE,
FitPSEs,
Mean = Mean,
Baseline_PSE = Baseline_PSE,
ConditionSelfmotion = ConditionSelfmotion,
ConditionInducedMotion = ConditionInducedMotion,
SelfmotionPresent = SelfmotionPresent,
InducedMotionPresent = InducedMotionPresent)$par[2],
RMSE_PSE = optim(InitialParameters_PSE,
FitPSEs,
Mean = Mean,
Baseline_PSE = Baseline_PSE,
ConditionSelfmotion = ConditionSelfmotion,
ConditionInducedMotion = ConditionInducedMotion,
SelfmotionPresent = SelfmotionPresent,
InducedMotionPresent = InducedMotionPresent)$value,
Predictions_PSE = Baseline_PSE +
ConditionSelfmotion*SelfmotionEffect*SelfmotionPresent +
ConditionInducedMotion*InducedMotionEffect*InducedMotionPresent) %>%
group_by(Participant,Congruent,Condition,velH) %>%
slice(1)
###############
#####Figure 5
###############
ModelFitPSEs = ggplot(Model_PSE %>% filter(Congruent != "1no motion"),aes(Predictions_PSE,Mean,color = Condition)) +
geom_point() +
coord_cartesian(xlim = c(1.5,9), ylim = c(1.5,9)) +
annotate("segment",x = 0, xend = 9, y = 0, yend = 9, linetype = 2) +
scale_color_manual(name = "Condition",
values = c(Red,Yellow,BlauUB),
labels = c("Blank Wall", "Regular Condition", "Moving Wall")) +
ylab("Fitted PSEs (m/s)") +
xlab("Model Predictions (PSEs)") +
theme(legend.position = c(0.1,0.8),
legend.background = element_rect(fill="lightblue",
size=0.5, linetype="solid")) +
ggtitle("A. Model Fit (PSEs)")
SelfmotionPSEs = ggplot(Model_PSE,aes(SelfmotionEffect)) +
geom_density() +
geom_vline(xintercept = 0, linetype = 2) +
xlab("Effect of Selfmotion (m/s)") +
ylab("Density") +
ggtitle("B. Self-Motion")
InducedMotionPSEs = ggplot(Model_PSE,aes(InducedMotionEffect)) +
geom_density() +
geom_vline(xintercept = 0, linetype = 2) +
xlab("Effect of Induced Motion (m/s)") +
ylab("Density") +
ggtitle("C. Induced Motion")
RightPart_PSEs = plot_grid(SelfmotionPSEs,InducedMotionPSEs,ncol = 1)
plot_grid(ModelFitPSEs,RightPart_PSEs)
ggsave("Figures/(Figure 5) Model_PSEs.jpg", w = 10, h = 8)
#get some summary statistics on RMSE, effect of self-motion and effect of induced motion
round(mean(Model_PSE$RMSE_PSE),2)
round(median(Model_PSE$RMSE_PSE),2)
round(mean(Model_PSE$SelfmotionEffect),2)
round(median(Model_PSE$SelfmotionEffect),2)
round(mean(Model_PSE$InducedMotionEffect),2)
round(median(Model_PSE$InducedMotionEffect),2)
##########################
######JND Model
##########################
Parameters = Parameters %>%
#values from the r script "Distance between Observer and Target"
mutate(AngularVelocity = case_when(
Congruent == "congruent" & velH == 6.6 & Condition %in% c("BlankWall", "RegularCondition") ~ 27.6,
Congruent == "incongruent" & velH == 6.6 & Condition %in% c("BlankWall", "RegularCondition") ~ 73.3,
Congruent == "congruent" & velH == 6.6 & Condition %in% c("BlankWallStatic", "RegularConditionStatic", "WallMoves") ~ 46.6,
Congruent == "incongruent" & velH == 6.6 & Condition %in% c("BlankWallStatic", "RegularConditionStatic", "WallMoves") ~ 46.6,
Congruent == "congruent" & velH == 8 & Condition %in% c("BlankWall", "RegularCondition") ~ 32.5,
Congruent == "incongruent" & velH == 8 & Condition %in% c("BlankWall", "RegularCondition") ~ 82.2,
Congruent == "congruent" & velH == 8 & Condition %in% c("BlankWallStatic", "RegularConditionStatic", "WallMoves") ~ 56.2,
Congruent == "incongruent" & velH == 8 & Condition %in% c("BlankWallStatic", "RegularConditionStatic", "WallMoves") ~ 56.2,
Congruent == "1no motion" & velH == 6.6 ~ 46.6,
Congruent == "1no motion" & velH == 8 ~ 56.2))
####model, see Equation 9
FitJNDs = function(x,SD,Baseline_JND,AngularVelocity,SelfmotionPresent){
SelfmotionEffect = x[1]
WF = x[2]
(mean((SD - (Baseline_JND +
SelfmotionEffect*SelfmotionPresent +
WF*AngularVelocity))^2))^0.5
}
#fit the model for each participant seperately and output the effect of self-motion,
#effects relative to Weber Fractions, the Root Mean Squared Error and the predictions (to be compared against actual performance)
Model_JND = Parameters %>%
group_by(Participant) %>%
mutate(SelfmotionEffect = optim(c(0,0),
FitJNDs,
Baseline_JND = Baseline_JND,
AngularVelocity = AngularVelocity,
SelfmotionPresent = SelfmotionPresent,
SD = SD)$par[1],
WF = optim(c(0,0),
FitJNDs,
Baseline_JND = Baseline_JND,
AngularVelocity = AngularVelocity,
SelfmotionPresent = SelfmotionPresent,
SD = SD)$par[2],
RMSE_JND = optim(c(0,0),
FitJNDs,
Baseline_JND = Baseline_JND,
AngularVelocity = AngularVelocity,
SelfmotionPresent = SelfmotionPresent,
SD = SD)$value,
Predictions_JND = Baseline_JND +
SelfmotionEffect*SelfmotionPresent +
WF*AngularVelocity) %>%
group_by(Participant,Congruent,Condition,velH) %>%
slice(1)
###############
#####Figure 6
###############
ModelFitJNDs = ggplot(Model_JND %>% filter(Congruent != "1no motion"),aes(Predictions_JND,SD,color = Condition)) +
geom_point() +
annotate("segment",x = 0, xend = 9, y = 0, yend = 9, linetype = 2) +
coord_cartesian(xlim = c(0,5.75), ylim = c(0,5.75)) +
scale_color_manual(name = "Condition",
values = c(Red,Yellow,BlauUB),
labels = c("Blank Wall", "Regular Condition", "Moving Wall")) +
ylab("Fitted SDs (m/s)") +
xlab("Model-Predicted SDs (m/s)") +
theme(legend.position = c(0.1,0.8),
legend.background = element_rect(fill="lightblue",
size=0.5, linetype="solid")) +
ggtitle("A. Model Fit (SDs)")
SelfmotionJNDs = ggplot(Model_JND,aes(SelfmotionEffect)) +
geom_density() +
geom_vline(xintercept = 0, linetype = 2) +
xlab("Effect of Selfmotion (m/s)") +
ylab("Density") +
ggtitle("B. Self-Motion")
WF_JNDs = ggplot(Model_JND,aes(WF)) +
geom_density() +
geom_vline(xintercept = 0, linetype = 2) +
xlab("Effect of Angular Velocity") +
ylab("Density") +
ggtitle("C. Angular Velocity")
RightPart_JNDs = plot_grid(SelfmotionJNDs,WF_JNDs,ncol = 1)
plot_grid(ModelFitJNDs,RightPart_JNDs)
ggsave("Figures/(Figure 6) Model_JNDs.jpg", w = 10, h = 8)
round(mean(Model_JND$RMSE_JND),2)
round(median(Model_JND$RMSE_JND),2)
round(mean(Model_JND$SelfmotionEffect),3)
round(median(Model_JND$SelfmotionEffect),3)
round(mean(Model_JND$WF),4)
round(median(Model_JND$WF),4)
###model overall ... correlation between compensation and selfmotion  on JNDs
Model_JND$Compensation = 1-Model_PSE$SelfmotionEffect
cor.test((Model_JND %>% filter(Condition %in% c("RegularCondition", "BlankWall")) %>%  group_by(Participant,WallMaterial) %>% slice(1))$Compensation,
(Model_JND %>% filter(Condition %in% c("RegularCondition", "BlankWall")) %>% group_by(Participant,WallMaterial) %>% slice(1))$SelfmotionEffect)
