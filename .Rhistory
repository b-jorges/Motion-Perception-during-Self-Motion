summary(mod1_Regular_Version2.0)
mod1_BlankWall_Version2.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest| Participant) + (velH_Pest| velH),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("BlankWall", "BlankWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_BlankWall_Version2.0)
mod1_WallMoves_Version2.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest| Participant) + (velH_Pest| velH),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("WallMoves", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_WallMoves_Version2.0)
mod1_Regular_Version3.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*Difference + (Difference + Congruent| Participant) + (Difference + Congruent| velH),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("RegularCondition", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_Regular_Version3.0)
mod1_BlankWall_Version3.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*Difference + (Difference + Congruent| Participant) + (Difference + Congruent| velH),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("BlankWall", "BlankWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_BlankWall_Version3.0)
mod1_WallMoves_Version3.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*Difference + (Difference + Congruent| Participant) + (Difference + Congruent| velH),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("WallMoves", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_WallMoves_Version3.0)
mod1_Regular_Version4.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest + Congruent| Participant) + (velH_Pest + Congruent| velH),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("RegularCondition", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_Regular_Version4.0)
mod1_BlankWall_Version4.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest + Congruent| Participant) + (velH_Pest + Congruent| velH),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("BlankWall", "BlankWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_BlankWall_Version4.0)
mod1_WallMoves_Version4.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest + Congruent| Participant) + (velH_Pest + Congruent| velH),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("WallMoves", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_WallMoves_Version4.0)
anova(mod1_Regular_Prereg,
mod1_Regular_Version2.0,
mod1_Regular_Version3.0,
mod1_Regular_Version4.0,
mod1_Regular_Version5.0,
mod1_Regular_Version6.0)
mod1_Regular_Version6.0
anova(mod1_BlankWall_Prereg,
mod1_BlankWall_Version2.0,
mod1_BlankWall_Version3.0,
mod1_BlankWall_Version4.0,
mod1_BlankWall_Version5.0,
mod1_BlankWall_Version6.0)
anova(mod1_WallMoves_Prereg,
mod1_WallMoves_Version2.0,
mod1_WallMoves_Version3.0,
mod1_WallMoves_Version4.0,
mod1_WallMoves_Version5.0,
mod1_WallMoves_Version6.0)
anova(mod1_Regular_Version2.0,
mod1_Regular_Version3.0,
mod1_Regular_Version4.0,
mod1_Regular_Version5.0,
mod1_Regular_Version6.0)
anova(mod1_BlankWall_Version2.0,
mod1_BlankWall_Version3.0,
mod1_BlankWall_Version4.0,
mod1_BlankWall_Version5.0,
mod1_BlankWall_Version6.0)
anova(mod1_WallMoves_Version2.0,
mod1_WallMoves_Version3.0,
mod1_WallMoves_Version4.0,
mod1_BlankWall_Version5.0,
mod1_BlankWall_Version6.0)
anova(mod1_WallMoves_Version2.0,
mod1_WallMoves_Version3.0,
mod1_WallMoves_Version4.0,
mod1_WallMoves_Version5.0,
mod1_WallMoves_Version6.0)
anova(mod1_Regular_Version3.0,
mod1_Regular_Version4.0)
anova(mod1_Regular_Version3.0,
mod1_Regular_Version4.0,
mod1_Regular_Version5.0,
mod1_Regular_Version6.0)
plot(mod1_Regular_Version6.0)
plot(mod1_Regular_Version5.0)
plot(mod1_Regular_Prereg)
plot(mod1_Regular_Version6.0)
plot(mod1_Regular_Version5.0)
plot(mod1_Regular_Version4.0)
plot(mod1_Regular_Version3.0)
plot(mod1_Regular_Version2.0)
plot(mod1_Regular_Version3.0)
summary(mod1_Regular_Version4.0)
summary(mod1_BlankWall_Version4.0)
summary(mod1_WallMoves_Version4.0)
summary(mod1_Regular_Version6.0)
summary(mod1_BlankWall_Version6.0)
summary(mod1_WallMoves_Version6.0)
summary(mod1_Regular_Version6.0)
summary(mod1_BlankWall_Version6.0)
summary(mod1_Regular_Version6.0)
summary(mod1_BlankWall_Version6.0)
summary(mod1_WallMoves_Version6.0)
plot(mod1_Regular_Version6.0)
plot(mod1_Regular_Version5.0)
plot(mod1_Regular_Version4.0)
plot(mod1_Regular_Version3.0)
plot(mod1_Regular_Version2.0)
plot(mod1_Regular_Prereg)
plot(mod1_Regular_Version6.0)
plot(mod1_Regular_Version5.0)
summary(mod1_Regular_Version6.0)
summary(mod1_BlankWall_Version6.0)
summary(mod1_WallMoves_Version6.0)
summary(mod1_BlankWall_Version6.0)
summary(mod1_Regular_Version6.0)
summary(mod1_BlankWall_Version6.0)
anova(mod1_Regular_Prereg,
mod1_Regular_Version2.0,
mod1_Regular_Version3.0,
mod1_Regular_Version4.0,
mod1_Regular_Version5.0,
mod1_Regular_Version6.0)
anova(mod1_Regular_Version2.0,
mod1_Regular_Version4.0,
mod1_Regular_Version5.0)
anova(mod1_Regular_Version4.0,
mod1_Regular_Version5.0)
anova(mod1_Regular_Version2.0,
mod1_Regular_Version4.0,
mod1_Regular_Version5.0)
anova(mod1_Regular_Version4.0,
mod1_Regular_Version5.0)
anova(mod1_Regular_Version2.0,
mod1_Regular_Version4.0,
mod1_Regular_Version5.0)
anova(mod1_Regular_Version4.0,
mod1_Regular_Version5.0,
mod1_Regular_Version2.0)
anova(mod1_Regular_Version4.0,
mod1_Regular_Version5.0,
mod1_Regular_Version2.0)
anova(mod1_Regular_Version4.0,
mod1_Regular_Version5.0)
anova(mod1_Regular_Version4.0,
mod1_Regular_Version5.0)
anova(mod1_Regular_Version5.0,
mod1_Regular_Version4.0)
anova(mod1_Regular_Version2.0,
mod1_Regular_Version4.0)
anova(mod1_Regular_Version2.0,
mod1_Regular_Version5.0)
4
anova(mod1_Regular_Version2.0,
mod1_Regular_Version4.0)
anova(mod1_Regular_Version6.0,
mod1_Regular_Version4.0,)
anova(mod1_Regular_Version6.0,
mod1_Regular_Version4.0)
mod1_Regular_Version6.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest + Congruent + velH| Participant),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("RegularCondition", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_Regular_Version6.0)
mod1_BlankWall_Version6.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest + Congruent + velH| Participant),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("BlankWall", "BlankWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_BlankWall_Version6.0)
mod1_WallMoves_Version6.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest + Congruent + velH| Participant),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("WallMoves", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_WallMoves_Version6.0)
anova(mod1_Regular_Prereg,
mod1_Regular_Version2.0,
mod1_Regular_Version3.0,
mod1_Regular_Version4.0,
mod1_Regular_Version5.0,
mod1_Regular_Version6.0)
anova(mod1_BlankWall_Prereg,
mod1_BlankWall_Version2.0,
mod1_BlankWall_Version3.0,
mod1_BlankWall_Version4.0,
mod1_BlankWall_Version5.0,
mod1_BlankWall_Version6.0)
Data_GLM$Participant
unique(Data_GLM$Participant)
Data_GLM$Congruent
Data_GLM$velH_Pest
Data_GLM$velH
Data_MainExperiment$velH
Data_MainExperiment$RightOrLeft
Data_MainExperiment$Direction
unique(Data_MainExperiment$Direction)
unique(Data_MainExperiment$RightOrLeft)
# for (i in 1:length(Data_Selfmotion$Participant)){
#   Judgement = Data_Selfmotion$Judgement[i]
#   Include = Data_Selfmotion$Include[i]
#   ID = Data_Selfmotion$Participant[i]
#   Condition = Data_Selfmotion$Condition[i]
#   Data_MainExperiment$Judgement[Data_MainExperiment$Condition == Condition & Data_MainExperiment$Participant == ID] = Judgement
#   Data_MainExperiment$Include[Data_MainExperiment$Condition == Condition & Data_MainExperiment$Participant == ID] = Include
# }
# Data_MainExperiment$Include[Data_MainExperiment$Condition == "RegularWallStatic" | Data_MainExperiment$Condition == "BlankWallStatic"] = "yes"
#
Data_GLM =
select(Data_MainExperiment,c(Participant,Congruent,velH,velH_Pest,Difference,Yes,Total,
velH_Subject,SelfMotionPresent,Static,Condition,Include,
RightOrLeft)) %>%
distinct()
save(Data_GLM, file = paste0(dirname(rstudioapi::getSourceEditorContext()$path),
"/SavedVariables/Data_GLM.RData"))
Data_GLM = Data_GLM %>%
mutate(velH_Direction = case_when(
RightOrLeft == 0 ~ velH,
RightOrLeft == 1 ~ (-1)*velH,
))
###Pull the whole repository. The code should work as long as the structure of the repository is not altered.
require(dplyr) #package for data structure manipulation
require(lme4) #package for statistical analysis
require(ggplot2) #package for data visualization
require(quickpsy) #package to fit psychometric functions
require(cowplot) #design for data visualiation
require(tidyverse)
theme_set(theme_cowplot()) #sets design parameters for data visualization
setwd(dirname(rstudioapi::getSourceEditorContext()$path)) #set path of this script as working directory
source("Utilities/parabolic.r") #load a bunch of custom functions from the file "parabolic.r" in the folder "Utilities"
source("Final Paper Data Preprocessing.r")
Data_GLM = Data_GLM %>%
mutate(velH_Direction = case_when(
RightOrLeft == 0 ~ velH,
RightOrLeft == 1 ~ (-1)*velH,
))
######
mod1_Regular_Prereg = glmer(cbind(Yes, Total - Yes) ~ Congruent*Difference + (Difference| Participant) + (Difference| velH_Direction),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("RegularCondition", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_Regular_JND_Test_lalala1)
mod1_BlankWall_Prereg = glmer(cbind(Yes, Total - Yes) ~ Congruent*Difference + (Difference| Participant) + (Difference| velH_Direction),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("BlankWall", "BlankWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_BlankWall_Prereg)
mod1_WallMoves_Prereg = glmer(cbind(Yes, Total - Yes) ~ Congruent*Difference + (Difference| Participant) + (Difference| velH_Direction),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("WallMoves", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_WallMoves_Prereg)
mod1_Regular_Version2.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest| Participant) + (velH_Pest|velH_Direction),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("RegularCondition", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_Regular_Version2.0)
mod1_BlankWall_Version2.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest| Participant) + (velH_Pest|velH_Direction),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("BlankWall", "BlankWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_BlankWall_Version2.0)
mod1_WallMoves_Version2.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest| Participant) + (velH_Pest|velH_Direction),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("WallMoves", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_WallMoves_Version2.0)
mod1_Regular_Version3.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*Difference + (Difference + Congruent| Participant) + (Difference + Congruent|velH_Direction),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("RegularCondition", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_Regular_Version3.0)
mod1_BlankWall_Version3.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*Difference + (Difference + Congruent| Participant) + (Difference + Congruent|velH_Direction),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("BlankWall", "BlankWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_BlankWall_Version3.0)
mod1_WallMoves_Version3.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*Difference + (Difference + Congruent| Participant) + (Difference + Congruent|velH_Direction),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("WallMoves", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_WallMoves_Version3.0)
mod1_Regular_Version4.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest + Congruent| Participant) + (velH_Pest + Congruent|velH_Direction),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("RegularCondition", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_Regular_Version4.0)
mod1_BlankWall_Version4.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest + Congruent| Participant) + (velH_Pest + Congruent|velH_Direction),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("BlankWall", "BlankWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_BlankWall_Version4.0)
mod1_WallMoves_Version4.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest + Congruent| Participant) + (velH_Pest + Congruent|velH_Direction),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("WallMoves", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_WallMoves_Version4.0)
mod1_Regular_Version5.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest + Congruent| Participant) + (velH_Pest|velH_Direction),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("RegularCondition", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_Regular_Version5.0)
mod1_BlankWall_Version5.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest + Congruent| Participant) + (velH_Pest|velH_Direction),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("BlankWall", "BlankWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_BlankWall_Version5.0)
mod1_WallMoves_Version5.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest + Congruent| Participant) + (velH_Pest|velH_Direction),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("WallMoves", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_WallMoves_Version5.0)
mod1_Regular_Version6.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest + Congruent +velH_Direction| Participant),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("RegularCondition", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_Regular_Version6.0)
mod1_BlankWall_Version6.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest + Congruent +velH_Direction| Participant),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("BlankWall", "BlankWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_BlankWall_Version6.0)
mod1_WallMoves_Version6.0 = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest + Congruent +velH_Direction| Participant),
family = binomial(link = "probit"),
data = Data_GLM %>% filter(Condition %in% c("WallMoves", "RegularWallStatic")),
nAGQ = 0,
glmerControl(optimizer = "nloptwrap"))
summary(mod1_WallMoves_Version6.0)
plot(mod1_Regular_Version6.0)
plot(mod1_Regular_Version5.0)
plot(mod1_Regular_Version4.0)
plot(mod1_Regular_Version3.0)
plot(mod1_Regular_Version2.0)
plot(mod1_Regular_Prereg)
anova(mod1_Regular_Prereg,
mod1_Regular_Version2.0,
mod1_Regular_Version3.0,
mod1_Regular_Version4.0,
mod1_Regular_Version5.0,
mod1_Regular_Version6.0)
anova(mod1_BlankWall_Prereg,
mod1_BlankWall_Version2.0,
mod1_BlankWall_Version3.0,
mod1_BlankWall_Version4.0,
mod1_BlankWall_Version5.0,
mod1_BlankWall_Version6.0)
anova(mod1_WallMoves_Prereg,
mod1_WallMoves_Version2.0,
mod1_WallMoves_Version3.0,
mod1_WallMoves_Version4.0,
mod1_WallMoves_Version5.0,
mod1_WallMoves_Version6.0)
anova(mod1_Regular_Version2.0,
mod1_Regular_Version3.0,
mod1_Regular_Version4.0,
mod1_Regular_Version5.0,
mod1_Regular_Version6.0)
anova(mod1_BlankWall_Version2.0,
mod1_BlankWall_Version3.0,
mod1_BlankWall_Version4.0,
mod1_BlankWall_Version5.0,
mod1_BlankWall_Version6.0)
anova(mod1_WallMoves_Version2.0,
mod1_WallMoves_Version3.0,
mod1_WallMoves_Version4.0,
mod1_WallMoves_Version5.0,
mod1_WallMoves_Version6.0)
anova(mod1_Regular_Version3.0,
mod1_Regular_Version4.0,
mod1_Regular_Version5.0,
mod1_Regular_Version6.0)
anova(mod1_BlankWall_Version3.0,
mod1_BlankWall_Version4.0)
anova(mod1_WallMoves_Version2.0,
mod1_WallMoves_Version4.0)
anova(mod1_Regular_Prereg,
mod1_Regular_Version2.0,
mod1_Regular_Version3.0,
mod1_Regular_Version4.0,
mod1_Regular_Version5.0,
mod1_Regular_Version6.0)
anova(mod1_Regular_Version5.0,mod1_Regular_Version4.0)
summary(mod1_Regular_Version5.0)
summary(mod1_Regular_Prereg)
summary(mod1_Regular_Version4.0)
mod1_Regular_JND_Test
###Pull the whole repository. The code should work as long as the structure of the repository is not altered.
require(dplyr) #package for data structure manipulation
require(lme4) #package for statistical analysis
require(ggplot2) #package for data visualization
require(quickpsy) #package to fit psychometric functions
require(cowplot) #design for data visualiation
require(tidyverse)
theme_set(theme_cowplot()) #sets design parameters for data visualization
setwd(dirname(rstudioapi::getSourceEditorContext()$path)) #set path of this script as working directory
source("Utilities/parabolic.r") #load a bunch of custom functions from the file "parabolic.r" in the folder "Utilities"
source("Final Paper Data Preprocessing.r")
#################################################
#                                               #
#          Preregistered Analyses               #
#                                               #
#################################################
#################################################
###################Main Condition####################
#################################################
#######Model comparisons JND
# mod1_Regular_JND_Test = glmer(cbind(Yes, Total - Yes) ~ Static*velH_Pest + (velH_Pest + Congruent  | Participant) + (velH_Pest + Congruent | velH),
#                      family = binomial(link = "probit"),
#                      data = Data_GLM %>% filter(Condition %in% c("RegularCondition", "RegularWallStatic")),
#                      nAGQ = 0,
#                      glmerControl(optimizer = "nloptwrap"))
# save(mod1_Regular_JND_Test, file = paste0(dirname(rstudioapi::getSourceEditorContext()$path),
#                                        "/SavedVariables/mod1_Regular_JND_Test.RData"))
load(file=paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/SavedVariables/mod1_Regular_JND_Test.RData"))
# mod1_Regular_JND_Null = glmer(cbind(Yes, Total - Yes) ~ Static + velH_Pest + (velH_Pest + Congruent  | Participant) + (velH_Pest + Congruent | velH),
#                      family = binomial(link = "probit"),
#                      data = Data_GLM %>% filter(Condition %in% c("RegularCondition", "RegularWallStatic")),
#                      nAGQ = 0,
#                      glmerControl(optimizer = "nloptwrap"))
# save(mod1_Regular_JND_Null, file = paste0(dirname(rstudioapi::getSourceEditorContext()$path),
#                                           "/SavedVariables/mod1_Regular_JND_Null.RData"))
load(file=paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/SavedVariables/mod1_Regular_JND_Null.RData"))
anova(mod1_Regular_JND_Test,mod1_Regular_JND_Null)
summary(mod1_Regular_JND_Test)
summary(mod1_Regular_JND_Null)
summary(mod1_Regular_JND_Test)
# mod1_Regular = glmer(cbind(Yes, Total - Yes) ~ Congruent*velH_Pest + (velH_Pest + Congruent  | Participant) + (velH_Pest + Congruent | velH),
#                      family = binomial(link = "probit"),
#                      data = Data_GLM %>% filter(Condition %in% c("RegularCondition", "RegularWallStatic")),
#                      nAGQ = 0,
#                      glmerControl(optimizer = "nloptwrap"))
# ConfidenceIntervals_Regular = confint(mod1_Regular,method = "boot")
# save(mod1_Regular, file = paste0(dirname(rstudioapi::getSourceEditorContext()$path),
#                                       "/SavedVariables/mod1_Regular.RData"))
# save(ConfidenceIntervals_Regular, file = paste0(dirname(rstudioapi::getSourceEditorContext()$path),
#                                       "/SavedVariables/ConfidenceIntervals_Regular.RData"))
load(file=paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/SavedVariables/mod1_Regular.RData"))
load(file=paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/SavedVariables/ConfidenceIntervals_Regular.RData"))
mod1_Regular
summary(mod1_Regular)
summary(mod1_Regular_Version5.0)
lmer(Mean ~ Congruent + (velH | Participant),
data = Parameters)
lmer(Mean ~ Congruent + (velH | Participant),
data = Parameters %>% filter(Condition %in% c("RegularCondition", "RegularWallStatic")))
lmer(Mean ~ Congruent + (velH | Participant),
data = Parameters %>% filter(Condition %in% c("BlankWall", "BlankWallStatic")))
summary(Model1)
load(file=paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/SavedVariables/Parameters.RData"))
Model1 = lmer(Mean ~ Congruent + (velH | Participant),
data = Parameters %>% filter(Condition %in% c("RegularCondition", "RegularWallStatic")))
summary(Model1)
Model2 = lmer(Mean ~ Congruent + (velH | Participant),
data = Parameters %>% filter(Condition %in% c("BlankWall", "BlankWallStatic")))
summary(Model2)
Model3 = lmer(Mean ~ Congruent + (velH | Participant),
data = Parameters %>% filter(Condition %in% c("WallMoves", "RegularWallStatic")))
summary(Model3)
Parameters$Mean
Model1 = lmer(SD ~ Congruent + (velH | Participant),
data = Parameters %>% filter(Condition %in% c("RegularCondition", "RegularWallStatic")))
summary(Model1)
Model2 = lmer(SD ~ Congruent + (velH | Participant),
data = Parameters %>% filter(Condition %in% c("BlankWall", "BlankWallStatic")))
summary(Model2)
Model3 = lmer(SD ~ Congruent + (velH | Participant),
data = Parameters %>% filter(Condition %in% c("WallMoves", "RegularWallStatic")))
summary(Model3)
summary(Model1)
Model1 = lmer(Mean ~ Congruent + (velH | Participant),
data = Parameters %>% filter(Condition %in% c("RegularCondition", "RegularWallStatic")))
summary(Model1)
Model2 = lmer(Mean ~ Congruent + (velH | Participant),
data = Parameters %>% filter(Condition %in% c("BlankWall", "BlankWallStatic")))
summary(Model2)
Model3 = lmer(Mean ~ Congruent + (velH | Participant),
data = Parameters %>% filter(Condition %in% c("WallMoves", "RegularWallStatic")))
summary(Model3)
summary(Model1)
summary(Model2)
summary(Model3)
Dataframe2
Dataframe2
